<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NoteProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NoteProductRepository extends EntityRepository
{
    public function findSalesByCategoryProductAndWaiter()
    {
        $em = $this->getEntityManager();
        $dql = $em->createQueryBuilder();
        $dql->select('concat(u.name, \' \', u.firstLastName) as waiter', 'c.name as category', 'sum(np.amount) as amount', 'sum(np.total) as total')
            ->from('AppBundle:NoteProduct', 'np')
            ->innerJoin('np.note', 'n')
            ->innerJoin('np.product', 'p')
            ->innerJoin('n.user', 'u')
            ->innerJoin('p.category', 'c')
            ->where('n.status = \'Entregado\'')
            ->groupBy('n.user', 'c.id')
            ->orderBy('u.id');

        return $dql->getQuery()->getResult();
    }

    public function findSalesByProductAndWaiter()
    {
        $em = $this->getEntityManager();
        $dql = $em->createQueryBuilder();
        $dql->select('concat(u.name, \' \', u.firstLastName) as waiter', 'p.name as product', 'sum(np.amount) as amount', 'sum(np.total) as total')
            ->from('AppBundle:NoteProduct', 'np')
            ->innerJoin('np.product', 'p')
            ->innerJoin('np.note', 'n')
            ->innerJoin('n.user', 'u')
            ->where('n.status = \'Entregado\'')
            ->groupBy('n.user', 'p.name')
            ->orderBy('u.id');

        return $dql->getQuery()->getResult();
    }

    public function findSalesByAccountWaiter()
    {
        $em = $this->getEntityManager();
        $dql = $em->createQueryBuilder();
        $dql->select('concat(u.name, \' \', u.firstLastName) as waiter', 'a.id as account', 'a.checkin', 'a.checkout', 'b.name as table', 'n.numberNote', 'c.name as category', 'sum(np.amount) as amount', 'sum(np.total) as total')
            ->from('AppBundle:NoteProduct', 'np')
            ->innerJoin('np.product', 'p')
            ->innerJoin('p.category', 'c')
            ->innerJoin('np.note', 'n')
            ->innerJoin('n.account', 'a')
            ->innerJoin('a.user', 'u')
            ->innerJoin('a.barTable', 'b')
            ->where('n.status = \'Entregado\'')
            ->groupBy('a.id', 'n.id', 'p.category')
            ->orderBy('a.id');

        return $dql->getQuery()->getResult();
    }

    public function findNoteProductId($userId, $numberNote)
    {
        $em = $this->getEntityManager();
        $dql = $em->createQueryBuilder();
        $dql->select('n.id')
            ->from('AppBundle:NoteProduct', 'np')
            ->innerJoin('np.note', 'n')
            ->innerJoin('n.user', 'u')
            ->where('u.id = :userId')
            ->andWhere('n.numberNote = :folio')
            ->groupBy('n.id');

        $dql->setParameter('userId', $userId);
        $dql->setParameter('folio', $numberNote);

        return $dql->getQuery()->getSingleResult();
    }
}
